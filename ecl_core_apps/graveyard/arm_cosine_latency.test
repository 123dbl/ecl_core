/**
 * @file /ecl_core_apps/src/benchmarks/dude.cpp
 *
 * @brief File comment
 *
 * File comment
 *
 * @date 09/09/2010
 **/

/*****************************************************************************
** Includes
*****************************************************************************/

#include <iostream>
#include <ecl/time/stopwatch.hpp>
#include <cmath>

/*****************************************************************************
** Using
*****************************************************************************/

using ecl::StopWatch;

/*****************************************************************************
** Classes
*****************************************************************************/
double cosine(double x) {
	double p0,p1,p2,p3,p4,p5,y,t,absx,frac,quad,pi2;
	p0= 0.999999999781;
	p1=-0.499999993585;
	p2= 0.041666636258;
	p3=-0.0013888361399;
	p4= 0.00002476016134;
	p5=-0.00000026051495;
	pi2=1.570796326794896; 		/* pi/2 */
	absx=x;
	if (x<0) absx=-absx; 	     /* absolute value of input */
	quad=(int) (absx/pi2);       	/* quadrant (0 to 3) */
	frac= (absx/pi2) - quad;     	/* fractional part of input */
	if(quad==0) t=frac * pi2;
	if(quad==1) t=(1-frac) * pi2;
	if(quad==2) t=frac * pi2;
	if(quad==3) t=(frac-1) * pi2;
	t=t * t;
	y=p0 + (p1*t) + (p2*t*t) + (p3*t*t*t) + (p4*t*t*t*t) + (p5*t*t*t*t*t);
	if( ( quad==2 ) | ( quad==1 ) ) y=-y;  /* correct sign */
	return(y);
};


class Pose2D {
public:
	Pose2D(const double &x_=0.0) :
		x(x_)
	{}

	void std() {
		double c = std::cos(x);
		x = c*x;
	}
	void rough() {
		double c = cosine(x);
		x = c;
	}
	double x;
};

/*****************************************************************************
** Methods
*****************************************************************************/

double glblStd() {
	double d = std::cos(0.3);
	return d;
}

void testStd(Pose2D &a) {
	a.std();
}

void testRough(Pose2D &a) {
	a.rough();
}

/*****************************************************************************
** Main
*****************************************************************************/

int main(int argc, char **argv) {

	Pose2D p1(1.3);
	StopWatch stopwatch;
	for ( unsigned int i = 0; i < 10; ++i ) {
		p1.std(); // ok
//		p1.rough(); // ok
//		testStd(p1); // not ok  // 1 function level deep
//		testRough(p1); // ok
//		glblStd();
	}
    std::cout << "Pose2D : " << stopwatch.split() << std::endl;

	return 0;
}
