/**
 * @file /ecl_linear_algebra/src/test.cpp
 *
 * @brief File comment
 *
 * File comment
 *
 * @date 28/07/2010
 **/

/*****************************************************************************
** Includes
*****************************************************************************/

#include <iostream>
#include <fstream>
#include <ecl/time.hpp>
#include <ecl/ipc/process.hpp>
#include "../../include/ecl/linear_algebra.hpp"


/*****************************************************************************
** Using
*****************************************************************************/

using ecl::linear_algebra::SparseMatrix;
using ecl::linear_algebra::DynamicSparseMatrix;
using ecl::linear_algebra::MatrixXd;
using ecl::linear_algebra::Matrix2d;
using ecl::StopWatch;
using ecl::linear_algebra::Vector3d;
using std::endl;
using std::cout;

void test_serializer()
{
	// declare some test data sets
	Vector3d v3d;				v3d << 0.1, 0.2, 0.3;
	Matrix2d m2d;				m2d << 0.21, 0.22, 0.23, 0.24;
	MatrixXd mxd(3,3); 		mxd << 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39;

	std::cout << "Create test data set as below " << endl;
	std::cout << "v3d=[" << endl << v3d << endl << "]" << endl;
	std::cout << "m2d=[" << endl << m2d << endl << "]"<< endl;
	std::cout << "mxd=[" << endl << mxd << endl << "]"<< endl;

	// declare some serialisation module for each objects
	ecl::linear_algebra::EigenDump<Vector3d> dump_v3d;
	ecl::linear_algebra::EigenDump<Matrix2d> dump_m2d;
	ecl::linear_algebra::EigenDump<MatrixXd> dump_mxd;

	// let's put whole data
	std::ofstream ofs("ms.dan", std::ios::binary);

	// writing
	dump_v3d.save( ofs, v3d );
	dump_m2d.save( ofs, m2d );
	dump_mxd.save( ofs, mxd );
	cout << "You got the ms.dan which has v3d, m2d and mxd " << endl;

	// close file object
	ofs.close();

	// clear data sets
	v3d.setZero();
	m2d.setZero();
	mxd.setZero();
	std::cout << "Your test data set were cleared as below  " << endl;
	std::cout << "v3d=[" << endl << v3d << endl << "]"<< endl;
	std::cout << "m2d=[" << endl << m2d << endl << "]"<< endl;
	std::cout << "mxd=[" << endl << mxd << endl << "]"<< endl;

	// loading
	std::ifstream ifs("ms.dan", std::ios::binary );
	dump_v3d.load( ifs, v3d );
	dump_m2d.load( ifs, m2d );
	dump_mxd.load( ifs, mxd );
	cout << "Serialiser reload the every data " << endl;

	std::cout << "You get the data set again as below " << endl;
	std::cout << "v3d=[" << endl << v3d << endl << "]"<< endl;
	std::cout << "m2d=[" << endl << m2d << endl << "]"<< endl;
	std::cout << "mxd=[" << endl << mxd << endl << "]"<< endl;
}


int main(int argc, char **argv)
{
//
//	try {
//	    ecl::Process::Priority(ecl::RealTimePriority4);
//	} catch ( ecl::StandardException &e ) {
//		// dont worry about it.
//	}

    std::cout << std::endl;
    std::cout << "***********************************************************" << std::endl;
    std::cout << "                  Matrix serialisation                                                   " << std::endl;
    std::cout << "***********************************************************" << std::endl;
    std::cout << std::endl;

	test_serializer();


	return 0;
}
